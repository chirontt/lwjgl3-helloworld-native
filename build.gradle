plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'  //requires JDK11+
    id 'com.gluonhq.client-gradle-plugin' version '0.1.39'  //requires GraalVM 21.1+
}

wrapper {
    gradleVersion = '6.8.3'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.github.chirontt.lwjgl'
description = 'LWJGL3 HelloWorld demo with native image by GraalVM'
//version = '0.0.1-SNAPSHOT'

ext {
    lwjglVersion = '3.2.3'
    graalvmVersion = '21.1.0'

    //LWJGL modules used: minimal OpenGL
    lwjglModules = ['lwjgl', 'lwjgl-assimp', 'lwjgl-glfw', 'lwjgl-openal', 'lwjgl-opengl', 'lwjgl-stb']

    mainClassName = 'com.github.chirontt.lwjgl.demo.HelloWorld'
}

repositories {
    mavenCentral()
    mavenLocal()
}

//detect the OS (assuming 64-bit, on Intel/AMD hardware)
private static String getCurrentPlatform() {
    def currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (currentOS.isWindows()) {
        return 'windows'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'macos'
    }
    return null
}

dependencies {
    //get recommended dependency versions from the LWJGL BOM
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    def currentOS = getCurrentPlatform()
	
    //add LWJGL modules and the current OS's natives to the compile and runtime classpaths
    lwjglModules.each {
        implementation "org.lwjgl:$it"
        if (it != 'lwjgl-egl')  //lwjgl-egl has no native libraries
            runtimeOnly "org.lwjgl:$it::natives-$currentOS"
    }

    //for compiling GraalVM substitution classes
    compileOnly "org.graalvm.nativeimage:svm:$graalvmVersion"
}

application {
    mainClass = project.mainClassName
    applicationName = project.name  //name of the resulting native executable
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

run {
    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the src/main/resources/META-INF/native-image directory.
    //This directory is read by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=src/main/resources/META-INF/native-image"]
}

gluonClient {
    compilerArgs = [
        '--initialize-at-run-time=org.lwjgl',
        '--report-unsupported-elements-at-runtime',
    ]
}
